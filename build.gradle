plugins {
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.10.1"
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'nebula.release' version '13.0.0'
}

repositories {
    jcenter()
}

dependencies {
	implementation 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
}


pluginBundle {
  website = 'https://artificerpi.github.io/spring-auto-asciidoc'
  vcsUrl = 'https://github.com/artificerpi/spring-auto-asciidoc'
  tags = ['autodoc', 'spring-rest-docs', 'asciidoc']

}

gradlePlugin {
    plugins {
        springAutoAsciidocPlugin {
            id = 'io.github.artificerpi.spring-auto-asciidoc'
            displayName = 'spring-auto-asciidoc'
            description = 'A plugin for auto genenrating documentation based on spring tests'
            implementationClass = 'io.github.artificerpi.SpringAutoAsciidocPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

publishVersion=publishVersion ? publishVersion.minus('v') : project.version.toString()
group = "io.github.artificerpi"

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/artificerpi/spring-auto-asciidoc")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            version = publishVersion
            from(components.java)
        }
    }
}

eclipse {
    project.natures 'org.eclipse.buildship.core.gradleprojectnature'
    classpath {
        downloadJavadoc = true
        downloadSources = true

        defaultOutputDir = file('build/default')
        file.whenMerged {
            entries.each {
                source ->
                    // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
                    if (source.kind == 'src' && source.hasProperty('output')) {
                        def outputPath = source.output
                        switch(source.path) {
                            case 'src/main/java':
                              source.output = 'build/classes/java/main'
                              break
                            case 'src/main/resources':
                              source.output = 'build/resources/main'
                              break
                            case 'src/test/java':
                              source.output = 'build/classes/java/test'
                              break
                            case 'src/test/resources':
                              source.output = 'build/resources/test'
                              break
                        }
                    }
            }
        }
    }
}

nebulaRelease {
    releaseBranchPatterns = [/master/, /develop/, /HEAD/, /(release(-|\/))?\d+(\.\d+)?\.x/, /v?\d+\.\d+\.\d+/]
//   releaseBranchPatterns = [master, develop HEAD, (release(-|\/))?\d+(\.\d+)?\.x, v?\d+\.\d+\.\d+]
  addReleaseBranchPattern(/master/)
}