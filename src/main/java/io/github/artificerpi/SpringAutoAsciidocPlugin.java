/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.artificerpi;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.asciidoctor.gradle.AsciidoctorPlugin;
import org.asciidoctor.gradle.AsciidoctorTask;
import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.ProjectConfigurationException;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.javadoc.Javadoc;
import org.gradle.external.javadoc.JavadocMemberLevel;

/**
 * Spring Rest Docs Auto plugin
 */
public class SpringAutoAsciidocPlugin implements Plugin<Project> {
  private static final String ASCIIDOCTOR_TASK_NAME = "asciidoctor";
  private static final String DEFAULT_CONTROLLER_TEST_CLASS_NAME_PATTERN =
      "(\\w+(\\-\\w+)*)-rest-controller-tests";
  private static final String ASCIIDOC_TEMPLATE_TASK_NAME = "asciidocTemplate";
  private static final String JSONDOCLET = "jsondoclet";
  private static final String JSON_DOCLET_TASK = "jsonDoclet";
  private static final String SPRING_AUTO_RESTDOCS_CORE_DEPENDENCY =
      "capital.scalable:spring-auto-restdocs-core:";
  private static final String SPRING_AUTO_RESTDOCS_JSON_DOCLET_DEPENDENCY =
      "capital.scalable:spring-auto-restdocs-json-doclet:";

  private Project project;
  private File snippetsDir;
  private File javadocJsonDir;

  // Main logic goes here.
  @Override
  public void apply(Project project) {
    if (!project.getPluginManager().hasPlugin("java")) {
      throw new ProjectConfigurationException("the java plugin must be applied",
          new GradleException(JavaPlugin.class.getSimpleName() + " is not applied"));
    }

    this.project = project;

    this.snippetsDir = new File(project.getBuildDir(), "generated-snippets");
    this.javadocJsonDir = new File(project.getBuildDir(), "generated-javadoc-json");

    // Apply fundamental plugins
    project.getPluginManager().apply(AsciidoctorPlugin.class);

    project.afterEvaluate(p -> {
      configureProjectDependencies();

      addJsonDocletTask();
      configureTestTask();
      addAsciidocTemplateTask();

      configureAsciidoctorTask();
    });

  }


  private void configureProjectDependencies() {
    final String version = "2.0.6";
    Configuration jsonDocletConfig = project.getConfigurations().maybeCreate(JSONDOCLET);
    configureDependencies(jsonDocletConfig,
        Arrays.asList(SPRING_AUTO_RESTDOCS_JSON_DOCLET_DEPENDENCY + version));

    Configuration testCompileConfig =
        project.getConfigurations().findByName(JavaPlugin.TEST_IMPLEMENTATION_CONFIGURATION_NAME);
    configureDependencies(testCompileConfig,
        Arrays.asList(SPRING_AUTO_RESTDOCS_CORE_DEPENDENCY + version));
  }

  private void configureDependencies(Configuration configuration,
      List<String> dependencyNotations) {
    dependencyNotations.forEach(d -> project.getDependencies().add(configuration.getName(), d));
  }

  private void configureTestTask() {
    Task testTask = project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME);
    testTask.dependsOn(JSON_DOCLET_TASK);
    testTask.getActions().add(e -> {
      System.setProperty("org.springframework.restdocs.outputDir", snippetsDir.getAbsolutePath());
      System.setProperty("org.springframework.restdocs.javadocJsonDir",
          javadocJsonDir.getAbsolutePath());
    });
  }


  private void addJsonDocletTask() {
    final JavaPluginConvention javaPlugin =
        project.getConvention().getPlugin(JavaPluginConvention.class);
    final SourceSetContainer sourceSets = javaPlugin.getSourceSets();
    final SourceSet mainSourceSet = sourceSets.getByName("main");

    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/javadoc/Javadoc.html
    project.getTasks().register(JSON_DOCLET_TASK, Javadoc.class, task -> {
      task.dependsOn(JavaPlugin.COMPILE_JAVA_TASK_NAME);
      task.setSource(mainSourceSet.getAllJava());
      task.setClasspath(mainSourceSet.getCompileClasspath());
      task.setDestinationDir(new File(project.getBuildDir(), "generated-javadoc-json"));
      task.options(option -> {
        option.setDoclet("capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet");
        option.setDocletpath(
            new ArrayList<>(project.getConfigurations().getByName(JSONDOCLET).getFiles()));
        option.setMemberLevel(JavadocMemberLevel.PACKAGE);
      });
    });
  }

  private void addAsciidocTemplateTask() {
    project.getTasks().register(ASCIIDOC_TEMPLATE_TASK_NAME, task -> {
      task.dependsOn(JavaPlugin.TEST_TASK_NAME);

      AsciidoctorTask asciidoctor =
          (AsciidoctorTask) project.getTasks().getByName(ASCIIDOCTOR_TASK_NAME);
      String regex = Objects.toString(asciidoctor.getAttributes().get("classNamePattern"),
          DEFAULT_CONTROLLER_TEST_CLASS_NAME_PATTERN);
      Pattern p = Pattern.compile(regex);
      List<File> snippetDirList = new ArrayList<>();
      List<String> snippetNameList = new ArrayList<>();

      task.doFirst(e -> {
        snippetsDir.mkdirs();
        File[] directories = snippetsDir.listFiles(
            (current, name) -> name.matches(regex) && new File(current, name).isDirectory());

        snippetDirList.addAll(Arrays.asList(directories));
        snippetNameList.addAll(snippetDirList.stream().map(dir -> {
          Matcher m = p.matcher(dir.getName());
          if (m.matches()) {
            return m.group(1);
          } else {
            return dir.getName();
          }
        }).collect(Collectors.toList()));

        project.getLogger().info("Found snippets {}", snippetNameList);
      });

      task.doLast(e -> {
        project.copy(c -> {
          c.from("src/docs/asciidoc");
          c.into(new File(project.getBuildDir(), "docs/asciidoc"));
          // index and overview
          c.include("*.adoc");
          c.eachFile(it -> {
            Map<String, Object> m = new HashMap<>();
            m.put("snippetNameList", snippetNameList);
            if (it.getName().equals("index.adoc")) {
              it.expand(m);
            }
          });
        });

        IntStream.range(0, snippetNameList.size()).forEach(i -> {
          String snippetName = snippetNameList.get(i);
          List<String> snippetMethodNameList = Arrays
              .asList(snippetDirList.get(i)
                  .listFiles((current, name) -> new File(current, name).isDirectory()))
              .stream().map(File::getName).collect(Collectors.toList());

          project.copy(c2 -> {
            c2.from("src/docs/asciidoc/snippet.adoc.template");
            c2.into(new File(project.getBuildDir(), "docs/asciidoc"));
            c2.rename(file -> snippetName + ".adoc");
            Map<String, Object> m = new HashMap<>();
            m.put("snippetClassName", snippetDirList.get(i).getName());
            m.put("snippetMethodNameList", snippetMethodNameList);
            c2.expand(m);
          });
        });
      });
    });
  }

  private void configureAsciidoctorTask() {
    AsciidoctorTask asciidoctor =
        (AsciidoctorTask) project.getTasks().getByName(ASCIIDOCTOR_TASK_NAME);
    asciidoctor.dependsOn(project.getTasks().getByName(ASCIIDOC_TEMPLATE_TASK_NAME));
    asciidoctor.setSourceDir(new File(project.getBuildDir(), "docs/asciidoc"));
    asciidoctor.setOutputDir(new File(project.getBuildDir(), "generated-docs"));

    Map<String, String> optionMap = new HashMap<>();
    optionMap.put("backend", "html");
    optionMap.put("doctype", "book");
    asciidoctor.options(optionMap);

    Map<String, String> attrMap = new HashMap<>();
    attrMap.put("source-highlighter", "highlightjs");
    attrMap.put("snippets", snippetsDir.getAbsolutePath());
    asciidoctor.attributes(attrMap);
    asciidoctor.doLast(task -> {
      try {
        new File(project.getBuildDir(), "resources/main/public").mkdirs();
        Files.copy(
            Paths.get(new File(project.getBuildDir(), "generated-docs/html5/index.html")
                .getAbsolutePath()),
            Paths.get(new File(project.getBuildDir(), "resources/main/public/index.html")
                .getAbsolutePath()),
            StandardCopyOption.REPLACE_EXISTING);
      } catch (IOException e1) {
        e1.printStackTrace();
      }
    });
  }

}
